#!/usr/bin/env bash

## prerequired tools
# echo 'Theese are the prerequired tools to run this script:'
# echo 'bat'
# echo 'fx'
# echo 'git'
# echo 'jq'
# echo 'node'
# echo 'npm'
# echo 'pr'

## update delaunay-ui repo
cd delaunay-ui
git switch master
git pull
git switch -
git merge master
cd -

## get the list of packages with their versions
bat delaunay-ui/packages/*/package.json | fx 'x => `"${x.name}": "${x.version}"`' > latestVersions.yaml

## get task number from current branch
folderName=$(basename $(pwd))
taskNumber=$(grep -e "[0-9]\+" -o <<< "$folderName")

lines=$(wc -l <<< "$taskNumber")

if [ $lines -eq 2 ]; then
  subTaskNumber=$(echo $taskNumber | grep -oE "[0-9]{2,}" | tail -n 1)
  taskNumber=$(echo $taskNumber | grep -oE "[0-9]{2,}" | head -n 1)
fi

## update all HRPortal* folders
# for folder in CustomerPortal*; do
for folder in HRPortal*; do
  echo '===================================================================================================='
  echo "Updating $folder"

  cd $folder

  DEFAULT_BRANCH=$(git branch --list master main | sed 's/^[\*+] //')

  ROOT_DIR=""

  if [ ! -f "package.json" ]; then
    ROOT_DIR=lib/
  fi

  PACKAGE_JSON="${ROOT_DIR}package.json"
  PACKAGE_LOCK="${ROOT_DIR}pnpm-lock.yaml"

  echo "Switching to $DEFAULT_BRANCH branch"
  echo

  git switch $DEFAULT_BRANCH
  git pull
  git switch -
  git merge $DEFAULT_BRANCH

  echo "Updating package.json"

  # for each line in latestVersions.yaml
  while IFS= read -r line; do
    # extract package name and version
    PACKAGE_NAME=$(echo "$line" | cut -d':' -f1 | tr -d '" ')
    PACKAGE_VERSION=$(echo "$line" | cut -d':' -f2 | tr -d '" ')

    # update package.json with the new version
    if grep -q "\"$PACKAGE_NAME\":" "$PACKAGE_JSON"; then
      echo "Updating $PACKAGE_NAME to version $PACKAGE_VERSION"
      jq --arg name "$PACKAGE_NAME" --arg version "$PACKAGE_VERSION" \
        '.dependencies[$name] = $version' "$PACKAGE_JSON" > tmp.json
      mv tmp.json "$PACKAGE_JSON"
    else
      echo "Package $PACKAGE_NAME not found in $PACKAGE_JSON"
    fi
  done < ../latestVersions.yaml
  
  echo "Installing dependencies"
  if [ -n "$ROOT_DIR" ]; then
    cd "$ROOT_DIR"
  fi
  pnpm install
  if [ -n "$ROOT_DIR" ]; then
    cd ..
  fi

  echo "Committing delaunay update"
  git add "$PACKAGE_JSON" "$PACKAGE_LOCK"
  git commit -m "#${taskNumber} #${subTaskNumber} style: Update package versions from delaunay-ui" --no-verify

  echo "Updating patch version in package.json"

  jq -r '.version' $PACKAGE_JSON
  NEW_VERSION=$(npx semver $(jq -r '.version' "$PACKAGE_JSON" | grep -o '[^"]\+') -i patch)

  jq --arg version "$NEW_VERSION" '.version = $version' "$PACKAGE_JSON" > tmp.json
  mv tmp.json "$PACKAGE_JSON"

  echo "Committing version bump and pushin changes"
  git add "$PACKAGE_JSON"
  git commit -m "#${taskNumber} #${subTaskNumber} chore: version bump" --no-verify
  git push -u origin $(git branch --show-current) --no-verify

  git diff $DEFAULT_BRANCH

  pr

  cd ..
  echo '----------------------------------------------------------------------------------------------------'
done

